/*
	This code is used to handle exception handling for all flows
*/

CREATE COMPUTE MODULE Exception_Handling_Configuration
	DECLARE LOG4JPATH EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN FALSE;
	END;	
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE Message CHARACTER;
		DECLARE rc BOOLEAN;
		CALL initLog4j(LOG4JPATH) INTO rc;
		SET OutputRoot = InputRoot;
		IF Environment.Variables.Format = 'ERROR' THEN
			
		ELSE
			IF (Environment.Variables.FileName IS NOT NULL) THEN
				SET OutputLocalEnvironment.Destination.File.Name = Environment.Variables.FileName;
			ELSE	
				SET OutputLocalEnvironment.Destination.File.Name = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHmmSSSSSSSS') ||'.txt';
			END IF;	
			SET OutputLocalEnvironment.Destination.File.Directory = Environment.Variables.Fail;
			PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		END IF;
		
			SET OutputRoot = NULL;
		    DECLARE domainFldName CHARACTER FIELDNAME(InputBody);
			IF domainFldName = 'DFDL' THEN
				SET OutputRoot.XMLNSC.Exception_Handler.originalMessage = ASBITSTREAM(InputRoot.DFDL.* CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
			ELSEIF domainFldName = 'XMLNSC' THEN
				SET OutputRoot.XMLNSC.Exception_Handler.originalMessage = ASBITSTREAM(InputRoot.XMLNSC CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
			ELSEIF domainFldName = 'SOAP' THEN
				SET OutputRoot.XMLNSC.Exception_Handler.originalMessage = ASBITSTREAM(InputRoot.SOAP.* CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
			ELSEIF domainFldName = 'BLOB' THEN
				SET OutputRoot.XMLNSC.Exception_Handler.originalMessage = InputRoot.BLOB.BLOB;
			END IF;
			--Email Alerts Formation
			SET Environment.Variables.TraceFileExc.exceptionDesc = getExceptionDesc(InputRoot, OutputRoot, InputExceptionList);
			SET OutputRoot.XMLNSC.Exception_Handler.InterfaceName = Environment.Variables.InterfaceName;
			SET OutputRoot.XMLNSC.Exception_Handler.ExceptionDescription = Environment.Variables.TraceFileExc.exceptionDesc;
			SET OutputRoot.XMLNSC.Exception_Handler.FileName = Environment.Variables.FileName;
			DECLARE LF CHARACTER CAST(x'0A' AS CHARACTER CCSID 1208);
				SET Message = 'File Name:'||Environment.Variables.FileName||LF||'Exception Description :'||Environment.Variables.TraceFileExc.exceptionDesc;
	        	CALL writeToLogFile(MessageFlowLabel, Environment.Variables.loggername,'DEBUG',Message) INTO rc;
	        PROPAGATE TO TERMINAL 'out' DELETE NONE;
		
		
		
	END;
END MODULE;	



CREATE PROCEDURE getExceptionDesc (IN InputRoot REFERENCE, IN OutputRoot REFERENCE, IN InputExceptionList REFERENCE)
RETURNS CHAR
BEGIN
	--Copy the exception description
	DECLARE continueLoop BOOLEAN;
	DECLARE inRefName,inRefValue CHARACTER;
	DECLARE flag INTEGER 0;
	DECLARE inRef REFERENCE TO InputRoot;
	DECLARE outRef REFERENCE TO OutputRoot;
	DECLARE exceptionData CHAR;
	SET continueLoop  =  TRUE;
	MOVE inRef TO InputExceptionList;
	WHILE continueLoop DO
		IF CARDINALITY(inRef.RecoverableException[])  =  0 THEN
			SET continueLoop  =  FALSE;
		ELSE
			MOVE inRef TO inRef.RecoverableException[1];
		END IF;
	END WHILE;
	DECLARE messageText CHARACTER;
 DECLARE inRef2 REFERENCE TO InputExceptionList;
 DECLARE insertRef REFERENCE TO InputExceptionList;
 WHILE lastmove(inRef2) DO
  IF inRef2.Number is not null THEN
          SET messageText  =  inRef2.Text;
          MOVE insertRef TO inRef2.Insert[>];
          WHILE LASTMOVE(insertRef) DO    --- fetch description from Insert[] 
           SET messageText = messageText ||'  '||insertRef.Text;
              MOVE insertRef NEXTSIBLING;
          END WHILE;
    END IF;
  move inRef2 lastchild;
 END WHILE;
 SET messageText = messageText||'    ' || inRef2;
	CREATE LASTCHILD OF OutputRoot AS outRef DOMAIN 'XMLNS';
	CREATE LASTCHILD OF OutputRoot.XMLNS AS outRef NAME 'ExceptionText';
	IF (LENGTH(inRef.[<].Text) = 0) THEN
		SET inRefName =  FIELDNAME(inRef);
		SET inRefValue =  FIELDVALUE(inRef.Text);
		SET outRef.ExceptionText  =  FIELDNAME(inRef)||'  :'||'  '||FIELDVALUE(inRef.Text);
	ELSE
		SET inRefName =  FIELDNAME(inRef);
		SET inRefValue =  FIELDVALUE(inRef.Text);
		SET outRef.ExceptionText  =  FIELDNAME(inRef.[<])||'  :'||'  '||FIELDVALUE(inRef.[<].Text);
	END IF;
	--SET exceptionData = inRefName||' '||inRefValue;
	  
	--IF CONTAINS(exceptionData,messageText) THEN
	IF inRefValue IS NULL THEN
		SET inRefValue = ' ';
	END IF;
	SET exceptionData = inRefName||' '||inRefValue||'  '||messageText;
	--END IF;
	SET OutputRoot.XMLNS  =  NULL;
	RETURN exceptionData;
END;

CREATE FUNCTION initLog4j( IN CONFIG_FILE_NAME CHARACTER )
RETURNS BOOLEAN
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.initLog4j";

CREATE FUNCTION writeToLogFile( IN COMPONENT_NAME CHARACTER,
IN LOGGER_NAME CHARACTER,
IN LEVEL CHARACTER,
IN TEXT CHARACTER )
RETURNS BOOLEAN
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.log";


CREATE PROCEDURE sftp(IN LOG4JPATH CHARACTER, IN destinationIP CHARACTER, IN DestinationDirectory CHARACTER,IN InputRoot REFERENCE, IN InputExceptionList REFERENCE,IN Environment REFERENCE,
IN OutputLocalEnvironment REFERENCE,IN InputLocalEnvironment REFERENCE, IN OutputRoot REFERENCE) BEGIN
    DECLARE Message CHARACTER;
    DECLARE rc BOOLEAN;
	CALL initLog4j(LOG4JPATH) INTO rc;
    IF (FIELDNAME(InputExceptionList.[1]) IS NULL) OR ((Environment.Variables.Count = 4) AND Environment.Variables.Operation = 'ERRORFTP') OR ((Environment.Variables.Count = 4) AND Environment.Variables.Operation = 'LOGFTP') OR ((Environment.Variables.Count = 4) AND Environment.Variables.Operation = 'FTP') THEN
    	    SET Environment.Variables.Count = 0;
			SET OutputLocalEnvironment.Destination.File.Name = Environment.Variables.FileName;
			SET OutputLocalEnvironment.Destination.File.Directory = Environment.Variables.Backup;	
			SET OutputLocalEnvironment.Destination.File.Remote.Server = destinationIP;
			SET OutputLocalEnvironment.Destination.File.Remote.ServerDirectory = DestinationDirectory;
			PROPAGATE TO TERMINAL 'out' DELETE NONE;
			IF Environment.Variables.Count = 0 THEN
				SET Message = 'File upload success to '||OutputLocalEnvironment.Destination.File.Remote.Server||' Server of '|| OutputLocalEnvironment.Destination.File.Remote.ServerDirectory;
        		CALL writeToLogFile(MessageFlowLabel, Environment.Variables.loggername,'DEBUG',Message) INTO rc;
        	END IF;
		ELSEIF ((FIELDNAME(InputExceptionList.[1]) IS NOT NULL) AND Environment.Variables.Count <= 1)THEN
		        DECLARE returnValue BOOLEAN SLEEP(10*1000);
	       		SET Environment.Variables.Count = Environment.Variables.Count + 1;
	       		SET OutputLocalEnvironment = InputLocalEnvironment;
	       		PROPAGATE TO TERMINAL 'out' DELETE NONE;
	       		IF Environment.Variables.Count = 2 OR Environment.Variables.Count = 1 THEN
	       			SET Environment.Variables.Count = 3;
	       			SET Message = 'File upload success to '||OutputLocalEnvironment.Destination.File.Remote.Server||' Server of '|| OutputLocalEnvironment.Destination.File.Remote.ServerDirectory;
        			CALL writeToLogFile(MessageFlowLabel, Environment.Variables.loggername,'DEBUG',Message) INTO rc;
	       		END IF;
		ELSE 
			SET Environment.Variables.Count = 3;
		    SET Message = 'File upload failed to '||InputLocalEnvironment.Destination.File.Remote.Server||' Server of '|| InputLocalEnvironment.Destination.File.Remote.ServerDirectory;
		    CALL writeToLogFile(MessageFlowLabel, Environment.Variables.loggername,'DEBUG',Message) INTO rc;
		    PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		END IF;
END;




CREATE PROCEDURE DBInsertion(IN LOG4JPATH CHARACTER,IN InputRoot REFERENCE, IN InputExceptionList REFERENCE,IN Environment REFERENCE,
  IN OutputRoot REFERENCE)BEGIN
	DECLARE Message CHARACTER;
	DECLARE rc BOOLEAN;
	CALL initLog4j(LOG4JPATH) INTO rc;
	IF FIELDNAME(InputExceptionList.[1]) IS NULL THEN
		SET Environment.Variables.Count = 0;
		PROPAGATE TO TERMINAL 'out4' DELETE NONE;
		IF Environment.Variables.Count = 0 AND Environment.Variables.Operation = 'DB' AND Environment.Variables.airline = '9WS2' THEN
			SET Message = 'DB Insertion done';
        	CALL writeToLogFile(MessageFlowLabel, Environment.Variables.loggername,'DEBUG',Message) INTO rc;
        END IF;
	ELSEIF ((FIELDNAME(InputExceptionList.[1]) IS NOT NULL) AND Environment.Variables.Count <= 1) THEN
		DECLARE returnValue BOOLEAN SLEEP(10*1000);
		SET Environment.Variables.Count = Environment.Variables.Count + 1;
		PROPAGATE TO TERMINAL 'out4' DELETE NONE;
		IF (Environment.Variables.Count = 2 OR Environment.Variables.Count = 1) AND Environment.Variables.Operation = 'DB' AND Environment.Variables.airline = '9WS2' THEN
			SET Message = 'DB Insertion done';
			SET Environment.Variables.Count = NULL;
			CALL writeToLogFile(MessageFlowLabel, Environment.Variables.loggername,'DEBUG',Message) INTO rc;
        END IF;
	ELSE
		SET Message = 'DB Insertion failed';
		SET Environment.Variables.M = 'DB Failed';
		SET Environment.Variables.Format = 'ERROR';
        SET Environment.Variables.Count = NULL;
		CALL writeToLogFile(MessageFlowLabel, Environment.Variables.loggername,'DEBUG',Message) INTO rc;
		PROPAGATE TO TERMINAL 'out3' DELETE NONE;
	END IF;
END;

